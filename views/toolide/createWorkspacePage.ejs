<% include ../header.ejs %>
<div class="row">
    <div class="col-md-4 col-md-offset-4">
        <div class="login-panel panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">워크스페이스 생성</h3>
            </div>
            <div class="panel-body">
                <button class="btn btn-primary" onclick="createWorkspace();">워크스페이스 생성</button>
            </div>
        </div>
    </div>
    
<script type="text/javascript">
/**
 * Module for displaying "Waiting for..." dialog using Bootstrap
 *
 * @author Eugene Maslovich <ehpc@em42.ru>
 */

var waitingDialog = waitingDialog || (function ($) {
    'use strict';

	// Creating modal dialog's DOM
	var $dialog = $(
		'<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
		'<div class="modal-dialog modal-m">' +
		'<div class="modal-content">' +
			'<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
			'<div class="modal-body">' +
				'<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
			'</div>' +
		'</div></div></div>');

	return {
		/**
		 * Opens our dialog
		 * @param message Custom message
		 * @param options Custom options:
		 * 				  options.dialogSize - bootstrap postfix for dialog size, e.g. "sm", "m";
		 * 				  options.progressType - bootstrap postfix for progress bar type, e.g. "success", "warning".
		 */
		show: function (message, options) {
			// Assigning defaults
			if (typeof options === 'undefined') {
				options = {};
			}
			if (typeof message === 'undefined') {
				message = 'Loading';
			}
			var settings = $.extend({
				dialogSize: 'm',
				progressType: '',
				onHide: null // This callback runs after the dialog was hidden
			}, options);

			// Configuring dialog
			$dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
			$dialog.find('.progress-bar').attr('class', 'progress-bar');
			if (settings.progressType) {
				$dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
			}
			$dialog.find('h3').text(message);
			// Adding callbacks
			if (typeof settings.onHide === 'function') {
				$dialog.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
					settings.onHide.call($dialog);
				});
			}
			// Opening dialog
			$dialog.modal();
		},
		/**
		 * Closes dialog
		 */
		hide: function () {
			$dialog.modal('hide');
		}
	};
})(jQuery);


function createWorkspace() {
    $.get("/toolide/createWorkspace/", function(args) {
        if(args == "error"){
            console.log(args);
            alert("워크스페이스 생성 시도 실패! 이미 존재하는 워크스페이스 이름! 다시 시도해주세요.");
            location.href = "/toolide/createWorkspacePage";
        } else {
            //alert(args + "생성을 잠시 기다려주세요~");
            waitingDialog.show();
            $.get("/toolide/checkStackCreateComplete", {args:args}, function(args2) {
                if(args2 == "CREATE_COMPLETE") {
                    waitingDialog.hide();
                    alert("생성 완료되었습니다!");
                    location.href = "/toolide/workspaceList";
                }
            });
        }
    }); 
}


</script>
<% include ../footer.ejs %>


